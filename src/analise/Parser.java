
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analise;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\006\011\000\002\007\015\000\002\010\011\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\012" +
    "\004\000\002\025\002\000\002\014\006\000\002\026\002" +
    "\000\002\013\007\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\005\000\002\023" +
    "\005\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\017\003\000\002\021\004\000\002\020\005\000" +
    "\002\020\002\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\016\004\016\005\025\006\020\007\015\033" +
    "\022\035\021\001\002\000\022\004\ufffa\005\ufffa\006\ufffa" +
    "\007\ufffa\016\ufffa\020\ufffa\033\ufffa\035\ufffa\001\002\000" +
    "\004\016\ufff4\001\002\000\022\004\ufffe\005\ufffe\006\ufffe" +
    "\007\ufffe\016\ufffe\020\ufffe\033\ufffe\035\ufffe\001\002\000" +
    "\022\004\ufffb\005\ufffb\006\ufffb\007\ufffb\016\ufffb\020\ufffb" +
    "\033\ufffb\035\ufffb\001\002\000\022\004\ufff9\005\ufff9\006" +
    "\ufff9\007\ufff9\016\ufff9\020\ufff9\033\ufff9\035\ufff9\001\002" +
    "\000\022\004\ufffc\005\ufffc\006\ufffc\007\ufffc\016\ufffc\020" +
    "\ufffc\033\ufffc\035\ufffc\001\002\000\004\016\ufff5\001\002" +
    "\000\004\004\105\001\002\000\004\002\104\001\002\000" +
    "\004\004\uffeb\001\002\000\004\036\ufff1\001\002\000\004" +
    "\016\ufff3\001\002\000\004\004\uffec\001\002\000\004\010" +
    "\072\001\002\000\004\010\031\001\002\000\004\016\030" +
    "\001\002\000\020\004\016\005\025\006\020\007\015\016" +
    "\027\033\022\035\021\001\002\000\004\004\uffed\001\002" +
    "\000\022\004\uffff\005\uffff\006\uffff\007\uffff\016\uffff\020" +
    "\uffff\033\uffff\035\uffff\001\002\000\004\002\000\001\002" +
    "\000\022\004\ufffd\005\ufffd\006\ufffd\007\ufffd\016\ufffd\020" +
    "\ufffd\033\ufffd\035\ufffd\001\002\000\014\004\032\013\040" +
    "\014\041\015\034\021\036\001\002\000\030\011\uffe7\016" +
    "\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7" +
    "\030\uffe7\031\uffe7\032\uffe7\001\002\000\004\011\062\001" +
    "\002\000\030\011\uffe8\016\uffe8\022\uffe8\023\uffe8\024\uffe8" +
    "\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\001" +
    "\002\000\010\030\056\031\057\032\055\001\002\000\014" +
    "\004\032\013\040\014\041\015\034\021\036\001\002\000" +
    "\030\011\uffde\016\uffde\022\uffde\023\042\024\047\025\046" +
    "\026\043\027\045\030\uffde\031\uffde\032\uffde\001\002\000" +
    "\030\011\uffea\016\uffea\022\uffea\023\uffea\024\uffea\025\uffea" +
    "\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\001\002\000" +
    "\030\011\uffe9\016\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9" +
    "\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\001\002\000" +
    "\014\004\uffdd\013\uffdd\014\uffdd\015\uffdd\021\uffdd\001\002" +
    "\000\014\004\uffda\013\uffda\014\uffda\015\uffda\021\uffda\001" +
    "\002\000\014\004\032\013\040\014\041\015\034\021\036" +
    "\001\002\000\014\004\uffd9\013\uffd9\014\uffd9\015\uffd9\021" +
    "\uffd9\001\002\000\014\004\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\021\uffdb\001\002\000\014\004\uffdc\013\uffdc\014\uffdc\015" +
    "\uffdc\021\uffdc\001\002\000\016\011\uffe0\016\uffe0\022\uffe0" +
    "\030\uffe0\031\uffe0\032\uffe0\001\002\000\030\011\uffde\016" +
    "\uffde\022\uffde\023\042\024\047\025\046\026\043\027\045" +
    "\030\uffde\031\uffde\032\uffde\001\002\000\016\011\uffdf\016" +
    "\uffdf\022\uffdf\030\uffdf\031\uffdf\032\uffdf\001\002\000\004" +
    "\022\054\001\002\000\030\011\uffe6\016\uffe6\022\uffe6\023" +
    "\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6" +
    "\032\uffe6\001\002\000\014\004\uffe4\013\uffe4\014\uffe4\015" +
    "\uffe4\021\uffe4\001\002\000\014\004\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\021\uffe3\001\002\000\014\004\uffe2\013\uffe2\014" +
    "\uffe2\015\uffe2\021\uffe2\001\002\000\014\004\032\013\040" +
    "\014\041\015\034\021\036\001\002\000\004\011\uffe5\001" +
    "\002\000\004\017\063\001\002\000\016\004\016\005\025" +
    "\006\020\007\015\033\022\035\021\001\002\000\020\004" +
    "\016\005\025\006\020\007\015\020\065\033\022\035\021" +
    "\001\002\000\024\004\ufff8\005\ufff8\006\ufff8\007\ufff8\016" +
    "\ufff8\020\ufff8\033\ufff8\034\066\035\ufff8\001\002\000\004" +
    "\017\067\001\002\000\016\004\016\005\025\006\020\007" +
    "\015\033\022\035\021\001\002\000\020\004\016\005\025" +
    "\006\020\007\015\020\071\033\022\035\021\001\002\000" +
    "\022\004\ufff7\005\ufff7\006\ufff7\007\ufff7\016\ufff7\020\ufff7" +
    "\033\ufff7\035\ufff7\001\002\000\014\004\032\013\040\014" +
    "\041\015\034\021\036\001\002\000\004\011\074\001\002" +
    "\000\004\017\075\001\002\000\016\004\016\005\025\006" +
    "\020\007\015\033\022\035\021\001\002\000\020\004\016" +
    "\005\025\006\020\007\015\020\077\033\022\035\021\001" +
    "\002\000\022\004\ufff6\005\ufff6\006\ufff6\007\ufff6\016\ufff6" +
    "\020\ufff6\033\ufff6\035\ufff6\001\002\000\004\036\101\001" +
    "\002\000\014\004\032\013\040\014\041\015\034\021\036" +
    "\001\002\000\004\016\uffe1\001\002\000\004\016\ufff0\001" +
    "\002\000\004\002\001\001\002\000\006\016\ufff2\036\uffef" +
    "\001\002\000\004\036\107\001\002\000\014\004\032\013" +
    "\040\014\041\015\034\021\036\001\002\000\004\016\uffee" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\032\002\013\003\023\004\005\005\010\006" +
    "\006\007\003\010\007\011\022\012\011\013\004\014\016" +
    "\016\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\004\025\005\010\006\006" +
    "\007\003\010\007\011\022\012\011\013\004\014\016\016" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\036\021\034\023" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\057\001\001\000\006\015\036\021" +
    "\052\001\001\000\006\020\047\022\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\051\022\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\036\021\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\063\004\005\005" +
    "\010\006\006\007\003\010\007\011\022\012\011\013\004" +
    "\014\016\016\012\001\001\000\026\004\025\005\010\006" +
    "\006\007\003\010\007\011\022\012\011\013\004\014\016" +
    "\016\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\067\004\005\005\010\006\006\007\003\010\007" +
    "\011\022\012\011\013\004\014\016\016\012\001\001\000" +
    "\026\004\025\005\010\006\006\007\003\010\007\011\022" +
    "\012\011\013\004\014\016\016\012\001\001\000\002\001" +
    "\001\000\010\015\036\021\034\023\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\075\004\005\005" +
    "\010\006\006\007\003\010\007\011\022\012\011\013\004" +
    "\014\016\016\012\001\001\000\026\004\025\005\010\006" +
    "\006\007\003\010\007\011\022\012\011\013\004\014\016" +
    "\016\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\036\017\102\021\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\105\001" +
    "\001\000\002\001\001\000\010\015\036\017\107\021\101" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {


	Map<String,Integer> ts = new HashMap<String,Integer>();
	Deque<Integer> pTipos = new LinkedList<Integer>();
	
	public void asVarCheck(String ident) throws Exception {
		Integer t = asUnstackType();
		if(ts.containsKey(ident)) {
			throw new Exception("Variável \"" + ident + "\" já declarada");
		} else {
			ts.put(ident, t);
			System.out.println("ID <" + ident + "," + Sym.terminalNames[t] + "> adicionado a tabela de símbolos");
		}
	}
	
	public void asStackUpType(Integer varType) {
		pTipos.addFirst(varType);
		System.out.println("Tipo empilhado: " + Sym.terminalNames[varType]);
	}
	
	public Integer asUnstackType() throws Exception {
		if (pTipos.isEmpty()) {
			throw new Exception("Pilha vazia");
		}
		Integer t = pTipos.removeFirst(); 
		System.out.println("Tipo desempilhado: " + Sym.terminalNames[t]);
		return t;
	}
	
	public void asStackUpResultingType_SUM_SUB() throws Exception {
		Integer aType = asUnstackType();
		Integer bType = asUnstackType();
		Integer resultingType;
		if (aType == bType){
			resultingType = aType;
		} else {
			if ((aType == Sym.Flutuante && bType == Sym.Inteiro) ||
				(aType == Sym.Inteiro && bType == Sym.Flutuante)) {
				resultingType = Sym.Flutuante;
			} else {
				throw new Exception("Não é possível fazer operações entre palavras e números");
			}
		}
		asStackUpType(resultingType);
	}
	
	public void testeComp(Integer aType, Integer bType) throws Exception {
		if (aType != bType) {
			throw new Exception("Tipos incompatíveis!");		
		} else {
			System.out.println("Tipos compatíveis");
		}
	}
	
	public void asCheckCompatibilityATT_CMD(String id) throws Exception {
		Integer expType = asUnstackType();
		Integer idType = asUnstackType();
		if(idType != null && expType != null){
			if ((idType == Sym.Inteiro && expType == Sym.Flutuante) ||
				(idType == Sym.Inteiro && expType == Sym.Texto) ||
				(idType == Sym.Flutuante && expType == Sym.Texto) ||
				(idType == Sym.Texto && expType == Sym.Inteiro) ||
				(idType == Sym.Texto && expType == Sym.Flutuante)){
				String idTypename = Sym.terminalNames[idType];
				String expTypename = Sym.terminalNames[expType]; 
				throw new Exception("A variável '" + id + "' do tipo " +
					 idTypename + " não pode armazenar valores do tipo "
					 + expTypename);
			}
		}	
	}
	

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= statements END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statements ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= variable END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= function 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // function ::= function_Aceito 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // function ::= function_Nao_Aceita 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // function ::= function_Repeticao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // function_Aceito ::= Aceito Open_Par comp Close_Par Open_Key statements Close_Key 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_Aceito",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // function_Nao_Aceita ::= Aceito Open_Par comp Close_Par Open_Key statements Close_Key Negado Open_Key statements Close_Key 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_Nao_Aceita",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // function_Repeticao ::= Repeticao Open_Par comp Close_Par Open_Key statements Close_Key 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_Repeticao",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // variable ::= decl_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // variable ::= decl_attribute_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // variable ::= attribute_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // decl_variable ::= data_types ID 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ident = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					asVarCheck((String)ident);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_variable",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$0 ::= 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ident = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

					asVarCheck((String)ident);
					asStackUpType(ts.get(ident));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // attribute_variable ::= ID NT$0 ATT exp 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ident = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
					asCheckCompatibilityATT_CMD((String)ident);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attribute_variable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$1 ::= 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ident = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

					asVarCheck((String)ident);
					asStackUpType(ts.get(ident));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // decl_attribute_variable ::= data_types ID NT$1 ATT exp 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ident = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
					asCheckCompatibilityATT_CMD((String)ident);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_attribute_variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // data_types ::= Inteiro 
            {
              Object RESULT =null;
		
					asStackUpType(Sym.Inteiro);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_types",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // data_types ::= Flutuante 
            {
              Object RESULT =null;
		
					asStackUpType(Sym.Flutuante);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_types",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // data_types ::= Texto 
            {
              Object RESULT =null;
		
					asStackUpType(Sym.Texto);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_types",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // params_type ::= INTEIRO_NUM 
            {
              Object RESULT =null;
		
					asStackUpType(Sym.Inteiro);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // params_type ::= FLUTUANTE_NUM 
            {
              Object RESULT =null;
		
					asStackUpType(Sym.Flutuante);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // params_type ::= CADEIA_CARACTERES 
            {
              Object RESULT =null;
		
					asStackUpType(Sym.Texto);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // params_type ::= ID 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ident = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					asStackUpType(ts.get(ident));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // params_type ::= Open_C exp2 Close_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params_type",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // comp ::= exp2 comp2 exp2 
            {
              Object RESULT =null;
		int aceito1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aceito1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object aceito1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aceito2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aceito2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object aceito2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					testeComp(ts.get(aceito1), ts.get(aceito2));
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // comp2 ::= IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp2",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // comp2 ::= MAIOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp2",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // comp2 ::= MENOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comp2",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= exp2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp2 ::= params_type op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp2",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // op ::= op2 params_type op 
            {
              Object RESULT =null;
		
			asStackUpResultingType_SUM_SUB();
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // op ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // op2 ::= SOMA_OP 
            {
              Object RESULT =null;
		
			System.out.println("Operação de soma");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op2",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // op2 ::= SUBTRACAO_OP 
            {
              Object RESULT =null;
		
			System.out.println("Operação de subtração");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op2",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // op2 ::= MULTIPLICACAO_OP 
            {
              Object RESULT =null;
		
			System.out.println("Operação de multiplicação");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op2",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // op2 ::= DIVISAO_OP 
            {
              Object RESULT =null;
		
			System.out.println("Operação de divisão");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op2",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // op2 ::= POTENCIACAO_OP 
            {
              Object RESULT =null;
		
			System.out.println("Operação de potenciação");
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op2",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
